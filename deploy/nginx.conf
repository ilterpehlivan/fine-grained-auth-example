worker_processes  auto;
error_log         "/opt/bitnami/openresty/nginx/logs/error-ilter.log" debug;
pid               "/opt/bitnami/openresty/nginx/tmp/nginx.pid";

events {
    worker_connections  1024;
}
http{
    log_format    main '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status  $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for"';
    access_log    "/opt/bitnami/openresty/nginx/logs/access-ilter.log" main;

    map $http_authorization $access_token {
        "~*^bearer (.*)$" $1;
        default $http_authorization;
    }

    # This is where token introspection responses will be stored if proxy_cache is enabled
    proxy_cache_path /opt/bitnami/openresty/nginx/tmp/tokens levels=1 keys_zone=token_responses:1m max_size=10m;
    server {
        listen 8080;

        set $oauth_token_endpoint     "http://keycloak:8080/realms/master/protocol/openid-connect/token/introspect";
        set $oauth_token_hint         "access_token"; # E.g. access_token, refresh_token
        set $oauth_client_id          "nginx-cli";
        set $oauth_client_secret      "08bAGFwyaDKyI3ti6QYvhpwXxjUV2awK";

        location /hello {
            proxy_set_header    X-Forwarded-For         $remote_addr;
            proxy_pass http://backend-service/get;
        }

        location /api/ {

            resolver 127.0.0.11;

            # Set the appropriate headers to pass the user profile
            proxy_set_header X-User-Profile $http_x_user_profile;
            proxy_set_header Authorization $http_authorization;

            # Configure OIDC authentication with Keycloak
            auth_request /auth;
            auth_request_set $auth_user $upstream_http_x_auth_user;

            # Allow passing the token to the backend service
            auth_request_set $auth_token $upstream_http_authorization;
            auth_request_set $auth_token_scheme $upstream_http_authorization_scheme;
            proxy_set_header Authorization $auth_token_scheme$auth_token;

            # Forward user profile header to the backend service
            auth_request_set $user_profile $upstream_http_x_user_profile;
            proxy_set_header X-User-Profile $user_profile;

            # Fetch user profile from Keycloak
            #auth_request /userprofile;
            #auth_request_set $user_profile $upstream_http_x_user_profile;
            #proxy_set_header X-User-Profile $user_profile;


            # Execute Lua code to fetch user profile from Keycloak
            access_by_lua '
                local http = require "resty.http"
                local httpc = http.new()
                
                -- Extract the bearer token from the original request
                local token = ngx.req.get_headers()["Authorization"]
                local _, _, extractedToken = string.find(token, "Bearer%s+(.+)")

                -- Log the extracted token at the info level
                ngx.log(ngx.INFO, "Extracted token: ", extractedToken)

                local res, err = httpc:request_uri("http://keycloak:8080/realms/master/protocol/openid-connect/userinfo", {
                    method = "GET",
                    headers = {
                        ["Authorization"] = "Bearer " .. extractedToken
                    }
                })

                if res and res.status == 200 then
                    ngx.log(ngx.INFO, "userinfo response is received:", res.body)
                    ngx.req.set_header("X-User-Profile", res.body)
                else
                    ngx.log(ngx.ERR, "request failed 403: ", err)
                    ngx.status = 403
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end
            ';


            # Enable proxying and set the backend service URL
            rewrite ^/api/(.*)$ /$1 break;
            proxy_pass http://backend-service$1;
        }

        location = /auth {
            internal;
            gunzip on; # Decompress if necessary

            proxy_method      POST;
            proxy_set_header  Authorization $arg_authorization;
            proxy_set_header  Content-Type "application/x-www-form-urlencoded";
            proxy_set_body    "token=$arg_token&client_id=$oauth_client_id&client_secret=$oauth_client_secret";
            proxy_pass $oauth_token_endpoint;

            proxy_cache           token_responses; # Enable caching of token introspection responses
            proxy_cache_key       $access_token;   # Cache the response for each unique access token
            proxy_cache_lock      on;              # Don't allow simultaneous requests for same token
            proxy_cache_valid     200 10s;         # How long to use cached introspection responses
            proxy_cache_use_stale error timeout;   # Use old responses if we cannot reach the server
            proxy_ignore_headers  Cache-Control Expires Set-Cookie; # Cache even when receiving these
        }

        location = /userprofile {
            # Additional request to retrieve user profile
            internal;
            #auth_request_set $access_token $upstream_http_authorization;
            proxy_pass http://keycloak:8080/realms/master/protocol/openid-connect/userinfo;
            proxy_pass_request_headers on;
            proxy_pass_request_body on;
        }
    }
}
